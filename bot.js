require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const {
  loadKeys,
  saveKeys,
  formatKeyList,
  getActiveKey,
  getNextActiveKey,
  resetAllKeys,
  markKeyExhausted,
  getKeyInfo
} = require("./keys");

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = Number(process.env.ADMIN_ID);

function isAdmin(ctx) {
  return ctx.from.id === ADMIN_ID;
}

const mainMenu = Markup.keyboard([
  ['üîë –¢–µ–∫—É—â–∏–π –∫–ª—é—á', 'üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π'],
  ['üîÑ –°–º–µ–Ω–∞ –∫–ª—é—á–∞', '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏'],
  ['‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
]).resize();

const keyManagementMenu = Markup.keyboard([
  ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á'],
  ['üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—é—á–∞', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
]).resize();

let userState = {};
function clearUserState(userId) {
  delete userState[userId];
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∫–ª—é—á–µ
 */
async function sendActiveKeyInfo(ctx) {
  try {
    const keys = await loadKeys();
    const active = getActiveKey(keys);
    
    if (!active) {
      return ctx.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.", Markup.keyboard([
        ['‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
      ]).resize());
    }
    
    active.lastUsed = new Date().toISOString();
    await saveKeys(keys);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const totalKeys = keys.length;
    const activeKeys = keys.filter(k => k.active).length;

    const keyboardButtons = [
      [{ text: "üö´ –û—Ç–º–µ—Ç–∏—Ç—å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–º", callback_data: `exhaust_${active.name}` }],
      [{ text: "‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á", callback_data: "next_key" }]
    ];

    await ctx.reply(
      `*–¢–µ–∫—É—â–∏–π –∫–ª—é—á*\n\n` +
      `üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${active.name}\n` +
      `üîë *–ö–ª—é—á:* \`${active.value}\`\n\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* ${activeKeys}/${totalKeys} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π`,
      {
        parse_mode: "MarkdownV2",
        reply_markup: {
          inline_keyboard: keyboardButtons
        }
      }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞.");
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
 */
bot.start(async (ctx) => {
  if (!isAdmin(ctx)) return;
  await ctx.reply("üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Keymaster Bot*", { parse_mode: "Markdown" });
  
  // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–ª—é—á–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  await sendActiveKeyInfo(ctx);
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", mainMenu);
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–µ–∫—É—â–∏–π –∫–ª—é—á"
 */
bot.hears('üîë –¢–µ–∫—É—â–∏–π –∫–ª—é—á', async (ctx) => {
  if (!isAdmin(ctx)) return;
  await sendActiveKeyInfo(ctx);
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
 */
bot.on('callback_query', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const data = ctx.callbackQuery.data;

  if (data === 'next_key') {
    try {
      const keys = await loadKeys();
      const active = getActiveKey(keys);
      
      if (!active) {
        await ctx.answerCbQuery("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π");
        return;
      }
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
      const nextKey = getNextActiveKey(keys, active.name);
      
      if (nextKey) {
        // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        active.lastUsed = new Date().toISOString();
        await saveKeys(keys);
        
        await ctx.answerCbQuery(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∫–ª—é—á ${nextKey.name}`);
        await ctx.deleteMessage();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∫–ª—é—á–µ
        const totalKeys = keys.length;
        const activeKeys = keys.filter(k => k.active).length;
        
        await ctx.reply(
          `*–°–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á*\n\n` +
          `üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${nextKey.name}\n` +
          `üîë *–ö–ª—é—á:* \`${nextKey.value}\`\n\n` +
          `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* ${activeKeys}/${totalKeys} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π`,
          {
            parse_mode: "MarkdownV2",
            reply_markup: {
              inline_keyboard: [
                [{ text: "üö´ –û—Ç–º–µ—Ç–∏—Ç—å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–º", callback_data: `exhaust_${nextKey.name}` }],
                [{ text: "‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á", callback_data: "next_key" }]
              ]
            }
          }
        );
      } else {
        await ctx.answerCbQuery("‚ùå –ë–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π");
        await ctx.reply("‚ùå –ë–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª—é—á–∞:", error);
      await ctx.answerCbQuery("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
      ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª—é—á–∞.");
    }
    
    return;
  }

  if (data.startsWith('exhaust_')) {
    try {
      const name = data.slice(8);
      const keys = await loadKeys();
      
      // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π
      const success = markKeyExhausted(keys, name);
      if (!success) {
        await ctx.answerCbQuery("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await saveKeys(keys);
      await ctx.answerCbQuery(`–ö–ª—é—á "${name}" –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π`);
      await ctx.deleteMessage();
      
      await ctx.reply(`‚ö†Ô∏è –ö–ª—é—á *${name}* –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π.`, { parse_mode: "Markdown" });
      
      // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –ø–æ –ø–æ—Ä—è–¥–∫—É
      const nextKey = getNextActiveKey(keys, name);
      
      if (nextKey) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        nextKey.lastUsed = new Date().toISOString();
        await saveKeys(keys);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalKeys = keys.length;
        const activeKeys = keys.filter(k => k.active).length;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –∫–ª—é—á–µ
        await ctx.reply(
          `*–ù–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á:*\n\n` +
          `üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${nextKey.name}\n` +
          `üîë *–ö–ª—é—á:* \`${nextKey.value}\`\n\n` +
          `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* ${activeKeys}/${totalKeys} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π`,
          {
            parse_mode: "MarkdownV2",
            reply_markup: {
              inline_keyboard: [
                [{ text: "üö´ –û—Ç–º–µ—Ç–∏—Ç—å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–º", callback_data: `exhaust_${nextKey.name}` }],
                [{ text: "‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á", callback_data: "next_key" }]
              ]
            }
          }
        );
      } else {
        await ctx.reply("‚ùå –ë–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.", Markup.keyboard([
          ['‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
        ]).resize());
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∫–ª—é—á–∞:", error);
      ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
    }
    
    return;
  }
  
  if (data.startsWith('activate_')) {
    try {
      const name = data.slice(9);
      const keys = await loadKeys();
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á
      const key = keys.find(k => k.name === name);
      if (!key) {
        await ctx.answerCbQuery("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á
      key.active = true;
      key.exhausted = false;
      key.lastUsed = new Date().toISOString();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await saveKeys(keys);
      await ctx.answerCbQuery(`–ö–ª—é—á "${name}" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
      await ctx.deleteMessage();
      
      await ctx.reply(`‚úÖ –ö–ª—é—á *${name}* –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.`, { 
        parse_mode: "Markdown",
        reply_markup: mainMenu
      });
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞:", error);
      await ctx.answerCbQuery("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
      ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞.");
    }
    
    return;
  }

  if (data === 'back') {
    await ctx.deleteMessage();
    await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", mainMenu);
    return;
  }

  if (data === 'back_to_management') {
    await ctx.deleteMessage();
    await ctx.reply("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏:", keyManagementMenu);
    return;
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π"
 */
bot.hears('üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π', async (ctx) => {
  if (!isAdmin(ctx)) return;
  try {
    const keys = await loadKeys();
    const text = formatKeyList(keys);
    ctx.reply(text, { 
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back" }]
        ]
      }
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π.");
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
 */
bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
  if (!isAdmin(ctx)) return;
  try {
    const keys = await loadKeys();
    if (!keys || keys.length === 0) {
      return ctx.reply("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø—É—Å—Ç");
    }
    
    const totalKeys = keys.length;
    const activeKeys = keys.filter(k => k.active).length;
    const exhaustedKeys = keys.filter(k => k.exhausted).length;
    const unusedKeys = keys.filter(k => !k.lastUsed).length;
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á
    const usedKeys = keys.filter(k => k.lastUsed);
    let mostUsedKey = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
    
    if (usedKeys.length > 0) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      // –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      const lastUsed = usedKeys.sort((a, b) => 
        new Date(b.lastUsed) - new Date(a.lastUsed)
      )[0];
      mostUsedKey = lastUsed.name;
    }
    
    const statsMessage = 
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π*\n\n` +
      `üìå –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: ${totalKeys}\n` +
      `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeKeys}\n` +
      `‚õî –ò—Å—á–µ—Ä–ø–∞–Ω–Ω—ã—Ö: ${exhaustedKeys}\n` +
      `üÜï –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: ${unusedKeys}\n` +
      `üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π: ${mostUsedKey}`;
    
    ctx.reply(statsMessage, { 
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back" }]
        ]
      }
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª—é—á–∞ (–¥–ª—è –¥–µ—Ç–∞–ª–µ–π)
 */
bot.hears(/^üîç ([\w\d_-]+)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  try {
    const keyName = ctx.match[1];
    const keys = await loadKeys();
    const info = getKeyInfo(keys, keyName);
    if (info) {
      ctx.reply(info, { 
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data: `activate_${keyName}` },
              { text: "üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data: `exhaust_${keyName}` }
            ],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data: "back_to_details" }]
          ]
        }
      });
    } else {
      ctx.reply("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ.");
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∞ –∫–ª—é—á–∞"
 */
bot.hears('üîÑ –°–º–µ–Ω–∞ –∫–ª—é—á–∞', async (ctx) => {
  if (!isAdmin(ctx)) return;
  try {
    const keys = await loadKeys();
    const activeKeys = keys.filter(k => k.active);
    
    if (activeKeys.length === 0) {
      return ctx.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.", Markup.keyboard([
        ['‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
      ]).resize());
    }
    
    const names = activeKeys.map(k => k.name);
    const chunkSize = 2;
    const keyboardButtons = [];
    
    for (let i = 0; i < names.length; i += chunkSize) {
      keyboardButtons.push(names.slice(i, i + chunkSize).map(n => "üîÑ " + n));
    }

    keyboardButtons.push(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']);

    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:", Markup.keyboard(keyboardButtons).resize());
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π.");
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
 */
bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => {
  if (!isAdmin(ctx)) return;
  ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", mainMenu);
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë"
 */
bot.hears('‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë', async (ctx) => {
  if (!isAdmin(ctx)) return;
  try {
    const keys = await loadKeys();
    resetAllKeys(keys);  // –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–∏
    await saveKeys(keys);
    ctx.reply("‚úÖ –í—Å–µ –∫–ª—é—á–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.", mainMenu);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–ª—é—á–µ
    await sendActiveKeyInfo(ctx);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–ª—é—á–µ–π:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–ª—é—á–µ–π.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏"
bot.hears('‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏', async (ctx) => {
  if (!isAdmin(ctx)) return;
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyManagementMenu);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á"
bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  userState[ctx.from.id] = { 
    action: 'adding_key',
    step: 'name'
  };
  
  await ctx.reply(
    "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: key1, account2, api_key_1):",
    Markup.keyboard([['‚ùå –û—Ç–º–µ–Ω–∞']]).resize()
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á"
bot.hears('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  try {
    const keys = await loadKeys();
    if (!keys || keys.length === 0) {
      return ctx.reply("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø—É—Å—Ç", keyManagementMenu);
    }
    
    const names = keys.map(k => k.name);
    const chunkSize = 3;
    const keyboardButtons = [];
    
    for (let i = 0; i < names.length; i += chunkSize) {
      keyboardButtons.push(names.slice(i, i + chunkSize).map(n => "üóëÔ∏è " + n));
    }
    
    keyboardButtons.push(['‚ùå –û—Ç–º–µ–Ω–∞']);
    
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", Markup.keyboard(keyboardButtons).resize());
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—é—á–∞"
bot.hears('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—é—á–∞', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  try {
    const keys = await loadKeys();
    if (!keys || keys.length === 0) {
      return ctx.reply("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø—É—Å—Ç", keyManagementMenu);
    }
    
    const names = keys.map(k => k.name);
    const chunkSize = 3;
    const keyboardButtons = [];
    
    for (let i = 0; i < names.length; i += chunkSize) {
      keyboardButtons.push(names.slice(i, i + chunkSize).map(n => "üëÅÔ∏è " + n));
    }
    
    keyboardButtons.push(['‚ùå –û—Ç–º–µ–Ω–∞']);
    
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", Markup.keyboard(keyboardButtons).resize());
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞
bot.hears(/^üóëÔ∏è ([\w\d_-]+)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  try {
    const keyName = ctx.match[1];
    const keys = await loadKeys();
    const keyIndex = keys.findIndex(k => k.name === keyName);
    
    if (keyIndex === -1) {
      return ctx.reply("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", keyManagementMenu);
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–ª—é—á
    keys.splice(keyIndex, 1);
    await saveKeys(keys);
    
    await ctx.reply(`üóëÔ∏è –ö–ª—é—á *${keyName}* —É–¥–∞–ª–µ–Ω.`, { 
      parse_mode: "Markdown",
      reply_markup: keyManagementMenu
    });
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª—é—á–∞
bot.hears(/^üëÅÔ∏è ([\w\d_-]+)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  try {
    const keyName = ctx.match[1];
    const keys = await loadKeys();
    const info = getKeyInfo(keys, keyName);
    
    if (info) {
      ctx.reply(info, { 
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data: `activate_${keyName}` },
              { text: "üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data: `exhaust_${keyName}` }
            ],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_management" }]
          ]
        }
      });
    } else {
      ctx.reply("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", keyManagementMenu);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
bot.hears('‚ùå –û—Ç–º–µ–Ω–∞', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  clearUserState(ctx.from.id);
  await ctx.reply("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", keyManagementMenu);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
bot.on('text', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const userId = ctx.from.id;
  const state = userState[userId];
  
  if (!state || state.action !== 'adding_key') return;
  
  try {
    const text = ctx.message.text.trim();
    
    if (state.step === 'name') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
      if (!/^[\w\d_-]+$/.test(text)) {
        return ctx.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:");
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–ª—é—á
      const keys = await loadKeys();
      if (keys.find(k => k.name === text)) {
        return ctx.reply("‚ùå –ö–ª—é—á —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:");
      }
      
      state.keyData = { name: text };
      state.step = 'value';
      
      await ctx.reply("üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ (API key, —Ç–æ–∫–µ–Ω –∏ —Ç.–¥.):");
      
    } else if (state.step === 'value') {
      state.keyData.value = text;
      state.step = 'email';
      
      await ctx.reply(
        "üìß –í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):",
        Markup.keyboard([['‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∞']]).resize()
      );
      
    } else if (state.step === 'email') {
      if (text.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
        state.keyData.email = text;
      }
      state.step = 'password';
      
      await ctx.reply(
        "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):",
        Markup.keyboard([['‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∞']]).resize()
      );
      
    } else if (state.step === 'password') {
      if (text.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
        state.keyData.password = text;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
      const keys = await loadKeys();
      const newKey = {
        name: state.keyData.name,
        value: state.keyData.value,
        active: true,
        current: keys.length === 0, // –ü–µ—Ä–≤—ã–π –∫–ª—é—á –¥–µ–ª–∞–µ–º —Ç–µ–∫—É—â–∏–º
        exhausted: false,
        lastUsed: null,
        email: state.keyData.email || null,
        password: state.keyData.password || null
      };
      
      keys.push(newKey);
      await saveKeys(keys);
      
      clearUserState(userId);
      
      let successMessage = `‚úÖ –ö–ª—é—á *${newKey.name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n`;
      successMessage += `üîë *–ó–Ω–∞—á–µ–Ω–∏–µ:* \`${newKey.value}\`\n`;
      if (newKey.email) successMessage += `üìß *Email:* ${newKey.email}\n`;
      if (newKey.password) successMessage += `üîê *–ü–∞—Ä–æ–ª—å:* ${newKey.password}\n`;
      
      await ctx.reply(successMessage, { 
        parse_mode: "Markdown",
        reply_markup: keyManagementMenu
      });
    }
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞:", error);
    clearUserState(userId);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.", keyManagementMenu);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
bot.hears('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', async (ctx) => {
  if (!isAdmin(ctx)) return;
  
  const userId = ctx.from.id;
  const state = userState[userId];
  
  if (!state || state.action !== 'adding_key') return;
  
  if (state.step === 'email') {
    state.step = 'password';
    await ctx.reply(
      "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):",
      Markup.keyboard([['‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∞']]).resize()
    );
  } else if (state.step === 'password') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –±–µ–∑ –ø–∞—Ä–æ–ª—è
    try {
      const keys = await loadKeys();
      const newKey = {
        name: state.keyData.name,
        value: state.keyData.value,
        active: true,
        current: keys.length === 0,
        exhausted: false,
        lastUsed: null,
        email: state.keyData.email || null,
        password: null
      };
      
      keys.push(newKey);
      await saveKeys(keys);
      
      clearUserState(userId);
      
      let successMessage = `‚úÖ –ö–ª—é—á *${newKey.name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n`;
      successMessage += `üîë *–ó–Ω–∞—á–µ–Ω–∏–µ:* \`${newKey.value}\`\n`;
      if (newKey.email) successMessage += `üìß *Email:* ${newKey.email}\n`;
      
      await ctx.reply(successMessage, { 
        parse_mode: "Markdown",
        reply_markup: keyManagementMenu
      });
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞:", error);
      clearUserState(userId);
      ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.", keyManagementMenu);
    }
  }
});


/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 */
bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:', err);
  if (ctx && ctx.reply) {
    ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.').then(() => {
      ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenu);
    });
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.launch()
  .then(() => console.log('ü§ñ Keymaster Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err));

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));