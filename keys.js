// keybot/keys.js
const fs = require("fs/promises");
const path = require("path");
const dayjs = require("dayjs");

const FILE_PATH = path.join(__dirname, "keys.json");

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–ª—é—á–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π
 */
async function loadKeys() {
  try {
    const data = await fs.readFile(FILE_PATH, "utf-8");
    return JSON.parse(data);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–ª—é—á–µ–π:", err);
    return [];
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–ª—é—á–∞—Ö –≤ —Ñ–∞–π–ª
 * @param {Array} keys –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π
 * @returns {Promise<void>}
 */
async function saveKeys(keys) {
  try {
    await fs.writeFile(FILE_PATH, JSON.stringify(keys, null, 2));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–ª—é—á–µ–π:", err);
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞
 * @param {Array} keys –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function formatKeyList(keys) {
  if (!keys || keys.length === 0) return "–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø—É—Å—Ç";
  
  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
  let activeCount = 0;
  let inactiveCount = 0;
  
  const formattedList = keys
    .map((k, i) => {
      const statusEmoji = k.active ? "üü¢" : "üî¥";
      k.active ? activeCount++ : inactiveCount++;
      
      const currentMark = k.current ? "‚úÖ " : "";
      const exhaustedMark = k.exhausted ? "‚õî " : "";
      const usedTime = k.lastUsed 
        ? `–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${dayjs(k.lastUsed).format("DD.MM HH:mm")}`
        : "–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è";
      
      return `${i + 1}. ${statusEmoji} ${currentMark}${exhaustedMark}*${k.name}* ‚Äî ${usedTime}`;
    })
    .join("\n");
  
  const summary = `\n\n*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* üü¢ ${activeCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö | üî¥ ${inactiveCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö`;
  
  return `*–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π*\n\n${formattedList}${summary}`;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
 * @param {Array} keys –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π
 * @returns {Object|null} –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –∏–ª–∏ null
 */
function getActiveKey(keys) {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–π –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
  const current = keys.find(k => k.active && k.current === true);
  if (current) return current;
  
  // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π
  const active = keys.find(k => k.active);
  if (active) {
    // –û—Ç–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
    active.current = true;
    return active;
  }
  
  return null;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –ø–æ –ø–æ—Ä—è–¥–∫—É
 * @param {Array} keys –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π
 * @param {string} currentKeyName –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
 * @returns {Object|null} –°–ª–µ–¥—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –∏–ª–∏ null
 */
function getNextActiveKey(keys, currentKeyName) {
  if (!keys || keys.length === 0) return null;
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "—Ç–µ–∫—É—â–∏–π" —É –≤—Å–µ—Ö –∫–ª—é—á–µ–π
  keys.forEach(k => k.current = false);
  
  // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
  const currentIndex = keys.findIndex(k => k.name === currentKeyName);
  if (currentIndex === -1) {
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π
    const firstActive = keys.find(k => k.active);
    if (firstActive) {
      firstActive.current = true;
      return firstActive;
    }
    return null;
  }
  
  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É, –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞ —Ç–µ–∫—É—â–∏–º
  for (let i = 1; i <= keys.length; i++) {
    const nextIndex = (currentIndex + i) % keys.length;
    if (keys[nextIndex] && keys[nextIndex].active) {
      keys[nextIndex].current = true;
      return keys[nextIndex];
    }
  }
  
  return null;
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ (–¥–µ–ª–∞–µ—Ç –∏—Ö –∞–∫—Ç–∏–≤–Ω—ã–º–∏)
 * @param {Array} keys –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π
 */
function resetAllKeys(keys) {
  if (!keys || keys.length === 0) return;
  
  keys.forEach(k => {
    k.active = true;
    k.current = false;
    k.exhausted = false;
  });
  
  // –ü–µ—Ä–≤—ã–π –∫–ª—é—á –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
  if (keys.length > 0) {
    keys[0].current = true;
  }
}

/**
 * –û—Ç–º–µ—á–∞–µ—Ç –∫–ª—é—á –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π
 * @param {Array} keys –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π
 * @param {string} name –ò–º—è –∫–ª—é—á–∞
 * @returns {boolean} –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
function markKeyExhausted(keys, name) {
  const key = keys.find(k => k.name === name);
  if (!key) return false;
  
  key.active = false;
  key.current = false;
  key.exhausted = true;
  key.lastMarkedExhausted = new Date().toISOString();
  return true;
}

/**
 * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–ª—é—á
 * @param {Array} keys –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π 
 * @param {string} name –ò–º—è –∫–ª—é—á–∞
 * @returns {boolean} –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
function activateKey(keys, name) {
  const key = keys.find(k => k.name === name);
  if (!key) return false;
  
  key.active = true;
  key.exhausted = false;
  return true;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
 * @param {Array} keys –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π
 * @param {string} name –ò–º—è –∫–ª—é—á–∞
 * @returns {string|null} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ –∏–ª–∏ null
 */
function getKeyInfo(keys, name) {
  const k = keys.find(k => k.name === name);
  if (!k) return null;
  
  // –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ
  const statusEmoji = k.active ? "üü¢" : "üî¥";
  const status = k.active ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω";
  const currentStatus = k.current ? "‚úÖ –¢–µ–∫—É—â–∏–π" : "";
  const exhaustedStatus = k.exhausted ? "‚õî –ò—Å—á–µ—Ä–ø–∞–Ω" : "";
  
  const lastUsed = k.lastUsed 
    ? dayjs(k.lastUsed).format("DD.MM.YYYY, HH:mm") 
    : "–Ω–∏–∫–æ–≥–¥–∞";
  const exhausted = k.lastMarkedExhausted 
    ? dayjs(k.lastMarkedExhausted).format("DD.MM.YYYY, HH:mm") 
    : "–Ω–∏–∫–æ–≥–¥–∞";
  
  let emailInfo = "";
  if (k.email) {
    emailInfo = `üìß *Email:* ${k.email}\n`;
  }
  
  let passwordInfo = "";
  if (k.password) {
    passwordInfo = `üîê *–ü–∞—Ä–æ–ª—å:* ${k.password}\n`;
  }
  
  return `üìù *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ*\n\n` +
    `üîë *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${k.name}\n` +
    `${statusEmoji} *–°—Ç–∞—Ç—É—Å:* ${status} ${currentStatus} ${exhaustedStatus}\n` +
    `\`${k.value}\`\n\n` +
    emailInfo +
    passwordInfo +
    `üïí *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:* ${lastUsed}\n` +
    `üõë *–û—Ç–º–µ—á–µ–Ω –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–º:* ${exhausted}`;
}

module.exports = {
  loadKeys,
  saveKeys,
  formatKeyList,
  getActiveKey,
  getNextActiveKey,
  resetAllKeys,
  markKeyExhausted,
  activateKey,
  getKeyInfo
};